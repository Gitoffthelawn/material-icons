@function material-icons-str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      material-icons-str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

@function material-icons-content($codepoint) {
  @return unquote('"\\#{$codepoint}"');
}

@mixin material-icons-font-face($font-family) {
  $font-file: $material-icons-font-path +
    material-icons-str-replace(to-lower-case($font-family), ' ', '-');

  @font-face {
    font-family: $font-family;
    font-style: normal;
    font-weight: 400;
    font-display: $material-icons-font-display;
    src: url('#{$font-file}.woff2') format('woff2'),
      url('#{$font-file}.woff') format('woff');
  }
}

@mixin material-icons($font-family) {
  font-family: $font-family;
  font-weight: normal;
  font-style: normal;
  font-size: $material-icons-font-size;
  display: inline-block;
  line-height: 1;
  text-transform: none;
  letter-spacing: normal;
  word-wrap: normal;
  white-space: nowrap;
  direction: ltr;

  /* Support for all WebKit browsers. */
  -webkit-font-smoothing: antialiased;
  /* Support for Safari and Chrome. */
  text-rendering: optimizeLegibility;

  /* Support for Firefox. */
  -moz-osx-font-smoothing: grayscale;

  /* Support for IE. */
  font-feature-settings: 'liga';
}

@mixin material-icon($name, $pseudo: 'before') {
  $codepoint: map-get($material-icons-codepoints, $name);

  &:#{$pseudo} {
    content: material-icons-content($codepoint);
  }
}
